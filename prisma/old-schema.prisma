generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Farmer {
  sawie_nr                 Int                 @id @default(autoincrement())
  name                     String?
  father_name              String?
  phone                    String?
  state                    String?
  tehsil                   String?
  district                 String?
  farmer_address           String?
  farmer_contact_person_id Int                 @default(1)
  super_visor_id           Int                 @default(1)
  labour_costs_female      String?
  labour_costs_male        String?
  FarmerContactPerson      FarmerContactPerson @relation(fields: [farmer_contact_person_id], references: [id])
  supervisor               SuperVisor          @relation(fields: [super_visor_id], references: [id])
  farmer_crop              FarmerCrop[]
  Fields                   Fields[]
  motor_tube_well          MotorTubeWell?
  solar_tube_well          SolarTubeWell?
  training                 Training?

  @@index([farmer_contact_person_id], map: "Farmer_farmer_contact_person_id_fkey")
  @@index([super_visor_id], map: "Farmer_super_visor_id_fkey")
}

model FarmerCrop {
  id                 Int         @id @default(autoincrement())
  farmerSawie_nr     Int
  crop_id            Int
  date_of_purchasing String?
  source             Source
  total_quantity     Int?
  total_price        Int?
  price_per_kg       Int?
  crop_variety_id    Int
  crop               Crop        @relation(fields: [crop_id], references: [id])
  crop_variety       CropVariety @relation(fields: [crop_variety_id], references: [id])
  farmer             Farmer      @relation(fields: [farmerSawie_nr], references: [sawie_nr])

  @@index([crop_id], map: "FarmerCrop_crop_id_fkey")
  @@index([crop_variety_id], map: "FarmerCrop_crop_variety_id_fkey")
  @@index([farmerSawie_nr], map: "FarmerCrop_farmerSawie_nr_fkey")
}

model Crop {
  id          Int          @id @default(autoincrement())
  crop_name   String?
  farmer_crop FarmerCrop[]
  sowing      Sowing[]
}

model CropVariety {
  id           Int          @id @default(autoincrement())
  variety_name String?
  FarmerCrop   FarmerCrop[]
  sowing       Sowing[]
}

model FarmerContactPerson {
  id     Int      @id @default(autoincrement())
  name   String?
  number String?
  farmer Farmer[]
}

model SuperVisor {
  id      Int            @id @default(autoincrement())
  type    SupervisorType
  name    String?
  number  String?
  company String?
  farmer  Farmer[]
}

model Fields {
  id                               Int                   @id @default(autoincrement())
  regen_farming                    RegenFarming
  special_farm_storage_aability    SpecialFarmAAbilities
  special_farm_processing_aability String?
  land_preparation                 String?
  organic_acres_farmed_again       Int?
  area_changed_into_organic        Int?
  traditional_farmed_cotton_area   Int?
  other_farmed_area                Int?
  production_forecast              Int?
  bio_gas_plant                    String?
  border_crop                      String?
  clear_election                   String?
  conversion_of_organisms          String?
  crop_id                          Int
  green_fertilizer                 String?
  inter_crop                       String?
  mapped_digitalized               String?
  method_of_irrigation             String?
  michung                          String?
  ownership                        OwnerShip
  rain_water                       String?
  trap_crop                        String?
  trees_at_edge                    String?
  country_id                       Int?
  district_id                      Int
  field_address                    String?
  state_id                         Int
  tehsil_id                        Int
  farmerSawie_nr                   Int
  field_name                       String?
  total_area                       String?
  disease_and_pest                 DiseaseAndPest[]
  fertilizer                       Fertilizer[]
  district                         Districts             @relation(fields: [district_id], references: [id])
  farmer                           Farmer                @relation(fields: [farmerSawie_nr], references: [sawie_nr])
  state                            States                @relation(fields: [state_id], references: [id])
  tehsil                           Tehsils               @relation(fields: [tehsil_id], references: [id])
  harvesting                       Harvesting[]
  Irrigation                       Irrigation[]
  IssueDetected                    IssueDetected[]
  preparation_of_field             PreparationOfField[]
  weed                             WeedTreatment[]

  @@index([crop_id], map: "Fields_crop_id_fkey")
  @@index([district_id], map: "Fields_district_id_fkey")
  @@index([farmerSawie_nr], map: "Fields_farmerSawie_nr_fkey")
  @@index([state_id], map: "Fields_state_id_fkey")
  @@index([tehsil_id], map: "Fields_tehsil_id_fkey")
}

model PreparationOfField {
  id                  Int          @id @default(autoincrement())
  levelalized         Boolean
  completion_date     String?
  activities          ActivityType
  male_labour_hours   Int?
  female_labour_hours Int?
  field_id            Int
  field               Fields       @relation(fields: [field_id], references: [id])

  @@index([field_id], map: "PreparationOfField_field_id_fkey")
}

model Sowing {
  id                  Int         @id @default(autoincrement())
  sowing_date         String?
  crop_id             Int
  crop_variety_id     Int
  male_labour_hours   Int?
  female_labour_hours Int?
  kg_sown             Int?
  price_per_kg        Int?
  crop                Crop        @relation(fields: [crop_id], references: [id])
  crop_variety        CropVariety @relation(fields: [crop_variety_id], references: [id])

  @@index([crop_id], map: "Sowing_crop_id_fkey")
  @@index([crop_variety_id], map: "Sowing_crop_variety_id_fkey")
}

model Irrigation {
  id                   Int              @id @default(autoincrement())
  irrigation_date      String?
  male_labour_hours    Int?
  female_labour_hours  Int?
  unit_m3              Int?
  source_of_irrigation IrrigationSource
  cost_acre            Int?
  field_id             Int
  field                Fields           @relation(fields: [field_id], references: [id])

  @@index([field_id], map: "Irrigation_field_id_fkey")
}

model WeedTreatment {
  id                  Int          @id @default(autoincrement())
  weed_date           Int?
  activity            String?
  title_of_product    String?
  quantity            Int?
  quantity_unit       QuantityUnit
  male_labour_hours   Int?
  female_labour_hours Int?
  cost_per_acer       Int?
  field_id            Int
  field               Fields       @relation(fields: [field_id], references: [id])

  @@index([field_id], map: "WeedTreatment_field_id_fkey")
}

model Fertilizer {
  id                  Int          @id @default(autoincrement())
  fertilizer_date     Int?
  male_labour_hours   Int?
  female_labour_hours Int?
  type_of_fertilizer  String?
  quantity            Int?
  quantity_unit       QuantityUnit
  fertilizer_cost     Int?
  cost_per_acer       Int?
  field_id            Int
  field               Fields       @relation(fields: [field_id], references: [id])

  @@index([field_id], map: "Fertilizer_field_id_fkey")
}

model IssueDetected {
  id                   Int                 @id @default(autoincrement())
  issue_date           Int?
  issue_name           String?
  issue_calssification IssueClassification
  male_labour_hours    Int?
  female_labour_hours  Int?
  issue_cost           Int?
  cost_per_acer        Int?
  field_id             Int
  field                Fields              @relation(fields: [field_id], references: [id])

  @@index([field_id], map: "IssueDetected_field_id_fkey")
}

model DiseaseAndPest {
  id                  Int             @id @default(autoincrement())
  disease_date        Int?
  cost                Int?
  product             ProductDropDown
  male_labour_hours   Int?
  female_labour_hours Int?
  quantity            Int?
  quantity_unit       QuantityUnit
  cost_per_acer       Int?
  field_id            Int
  field               Fields          @relation(fields: [field_id], references: [id])

  @@index([field_id], map: "DiseaseAndPest_field_id_fkey")
}

model Harvesting {
  id                     Int           @id @default(autoincrement())
  est_date_of_harvesting String?
  date_of_completion     String?
  est_yield              Int?
  harvested_yield        Int?
  male_labour_hours      Int?
  female_labour_hours    Int?
  cost_per_acer          Int?
  field_id               Int
  mechanisation          Mechanisation
  total_cost             Int?
  field                  Fields        @relation(fields: [field_id], references: [id])

  @@index([field_id], map: "Harvesting_field_id_fkey")
}

model Training {
  id             Int     @id @default(autoincrement())
  month          String?
  topic          String?
  trainer_name   String?
  idea           String?
  farmerSawie_nr Int     @unique
  farmer         Farmer  @relation(fields: [farmerSawie_nr], references: [sawie_nr])
}

model SolarTubeWell {
  id              Int     @id @default(autoincrement())
  farmerSawie_nr  Int     @unique
  activity_date   String?
  repairing_costs Int?
  manageing_hours Int?
  costs_per_hour  Int?
  farmer          Farmer  @relation(fields: [farmerSawie_nr], references: [sawie_nr])
}

model MotorTubeWell {
  id              Int     @id @default(autoincrement())
  farmerSawie_nr  Int     @unique
  activity_date   String?
  repairing_costs Int?
  manageing_hours Int?
  diesel_quantity Int?
  costs_per_hour  Int?
  costs_per_liter Int?
  farmer          Farmer  @relation(fields: [farmerSawie_nr], references: [sawie_nr])
}

model Tehsils {
  id                    Int       @id @default(autoincrement())
  name                  String?
  district_id           Int
  state_id              Int
  country_id            Int
  salinity_exposure     Int?
  salinity_exposure_max Int?
  arsenic_exposure      Int?
  arsenic_exposure_max  Int?
  water_level           Int?
  water_level_max       Int?
  tehsil_coordinates    String?   @db.LongText
  Fields                Fields[]
  Country               Countries @relation(fields: [country_id], references: [id])
  District              Districts @relation(fields: [district_id], references: [id])
  State                 States    @relation(fields: [state_id], references: [id])

  @@index([country_id], map: "Tehsils_country_id_fkey")
  @@index([district_id], map: "Tehsils_district_id_fkey")
  @@index([state_id], map: "Tehsils_state_id_fkey")
}

model States {
  id         Int         @id @default(autoincrement())
  name       String?
  country_id Int
  Districts  Districts[]
  Fields     Fields[]
  Country    Countries   @relation(fields: [country_id], references: [id])
  Tehsils    Tehsils[]

  @@index([country_id], map: "States_country_id_fkey")
}

model Districts {
  id         Int       @id @default(autoincrement())
  name       String?
  state_id   Int
  country_id Int
  Country    Countries @relation(fields: [country_id], references: [id])
  State      States    @relation(fields: [state_id], references: [id])
  Fields     Fields[]
  Tehsils    Tehsils[]

  @@index([country_id], map: "Districts_country_id_fkey")
  @@index([state_id], map: "Districts_state_id_fkey")
}

model Countries {
  id        Int         @id @default(autoincrement())
  name      String?
  Districts Districts[]
  States    States[]
  Tehsils   Tehsils[]
}

enum SupervisorType {
  field_book_responsible
  field_trainer
  assistant
}

enum RegenFarming {
  registered
  transition_phase
  have_certificate
}

enum SpecialFarmAAbilities {
  no_storing
  temp_warehouse
  perm_warehouse
  transition_bags_available
}

enum Source {
  by_myself
  market_address
}

enum OwnerShip {
  self_owned
  family_member
  on_lease
}

enum ActivityType {
  manual
  mechanical
}

enum IrrigationSource {
  solar_tube_well
  motor_tube_well
  canal
}

enum QuantityUnit {
  liter
  kg
}

enum IssueClassification {
  disease
  insect
  soil
  water
  temperature
}

enum ProductDropDown {
  Product1
  Product2
  Product3
  Product4
}

enum Mechanisation {
  manual
  machines
}
